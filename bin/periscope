#!/usr/bin/env python
# -*- coding: utf-8 -*-

#   This file is part of periscope.
#
#    periscope is free software; you can redistribute it and/or
#    modify it under the terms of the GNU General Public
#    License as published by the Free Software Foundation; either
#    version 2 of the License, or (at your option) any later version.
#
#    periscope is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with periscope; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

from optparse import OptionParser
from periscope import version, periscope
import logging
import mimetypes
import os

def main():
    '''Download subtitles'''
    # parse command line options
    parser = OptionParser("usage: %prog [options] file1 file2", version=version.VERSION)
    parser.add_option("-l", "--language", action="append", dest="langs", help="wanted language (ISO 639-1 two chars) for the subtitles (e.g. fr, en). Multiple uses allowed such that `%prog -l fr -l en file1`")
    parser.add_option("-m", "--multi", action="store_true", dest="multi", help="download one subtitle per specified language (instead of one of them) and name them accordingly (e.g. .fr.srt, .en.srt)")
    parser.add_option("-p", "--plugin", action="append", dest="plugins", help="plugins to use")
    parser.add_option("-f", "--force", action="store_true", dest="force", help="force download of a subtitle even there is already one present")
    parser.add_option("-q", "--query", action="append", dest="queries", help="query to send to the subtitles website")
    parser.add_option("-C", "--no-config-file", action="store_true", dest="noConfig", help="don't use the config file (requires -l to be specified)")
    parser.add_option("--list-all-plugins", action="store_true", dest="listAllPlugins", help="list all plugins supported by periscope")
    parser.add_option("--list-api-plugins", action="store_true", dest="listApiPlugins", help="list api-based plugins supported by periscope")
    parser.add_option("--list-active-plugins", action="store_true", dest="listActivePlugins", help="list all plugins used to search subtitles (a subset of all the supported plugins)")
    parser.add_option("--quiet", action="store_true", dest="quiet", help="run in quiet mode (only show warning and error messages)")
    parser.add_option("--debug", action="store_true", dest="debug", help="set the logging level to debug")
    (options, args) = parser.parse_args()
    if not args and not options:
        print parser.print_help()
        exit(1)
    # process args
    if options.debug:
        logging.basicConfig(level=logging.DEBUG, format='%(asctime)s %(name)-24s %(levelname)-8s %(message)s', datefmt='%b-%d %H:%M:%S')
    elif options.quiet:
        logging.basicConfig(level=logging.WARN, format='%(levelname)s: %(name)s %(message)s')
    else:
        logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(name)s %(message)s')
    # don't use the config file if specified so
    if options.noConfig:
        if not options.langs:
	        logging.error("Option -C (--no-config-file) is used without -l (--language)")
	        exit(1)
        periscope_client = periscope.Periscope(config=False, multi=options.multi, force=options.force)
    else:
        periscope_client = periscope.Periscope(config=True, multi=options.multi, force=options.force)
    if options.plugins:
        periscope_client.plugins = options.plugins
    if options.listAllPlugins:
        plugins = periscope_client.listExistingPlugins()
        for plugin in plugins:
            print "%s" % plugin
        exit(0)
    if options.listApiPlugins:
        plugins = periscope_client.listAPIPlugins()
        for plugin in plugins:
            print "%s" % plugin
        exit(0)
    if options.listActivePlugins:
        plugins = periscope_client.plugins
        for plugin in plugins:
            print "%s" % plugin
        exit(0)
    if options.queries:
        args += options.queries
    # get languages if any
    if options.langs:
        periscope_client.languages = options.langs
    else:
        logging.info("No language given, looking into configuration file")
        languages = periscope_client.languages
        if not languages:
            logging.error("No language found in configuration file")
            exit(1)
    subtitles = periscope_client.downloadSubtitles(args)
    periscope_client.stopWorkers()
    if len(subtitles) == 0:
        exit(1)
    print "*"*50
    print "Downloaded %s subtitles" % len(subtitles)
    for s in subtitles:
        print s['lang'] + " - " + s['subtitlepath']
    print "*"*50
    
if __name__ == "__main__":
    main()
